name: Build and Release latest version

on: 
  push:
    branches: main

jobs:
  check_build_number:
    runs-on: ubuntu-latest
    outputs:
      number: ${{ steps.check_number.outputs.number }}
      new_release: ${{ steps.check_number.outputs.new_release }}
    
    steps:
      - name: Checkout VERSION
        uses: actions/checkout@v3
        with:
          sparse-checkout: |
            VERSION
          sparse-checkout-cone-mode: false
      
      - name: Check latest release and current version number
        id: check_number
        run: |
          latest_release_json=$(curl -L \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.ACCESS_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/latest")

          latest_release_tag=$(echo "$latest_release_json" | jq -r .tag_name)
          current_version=$(head -1 VERSION)

          echo "Latest release version: $latest_release_tag"
          echo "Current version: $current_version"

          if [ "$latest_release_tag" == "$current_version" ]; then
            echo "Release already exists"
            echo "new_release=false" >> "$GITHUB_OUTPUT"
          else
            echo "New release"
            echo "number=$(head -1 VERSION)" >> "$GITHUB_OUTPUT"
          fi

  build_executables:
    needs: check_build_number
    if: needs.check_build_number.outputs.new_release != 'false'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    env:
      PYTHON_VERSION: "3.12"

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
    
    - name: Create a one-file bundled executable
      run: pyinstaller -n bphs_${{ needs.check_build_number.outputs.number }}_${{ runner.os }} -F src/main.py

    - name: Upload executable
      uses: actions/upload-artifact@v4
      with:
        name: ${{ needs.check_build_number.outputs.number }}-${{ runner.os }}
        path: dist/

  release_build:
    needs: [check_build_number, build_executables]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Archive artifacts
        run: |
          find "artifacts" -type f | while read -r file; do
            filename=$(basename "$file" .exe)
            zip -j "$(dirname "$file")/$filename.zip" "$file"
            rm "$file"
          done

      - name: Create Release
        id: current_release
        run: |
          release_json=$(curl -L -f \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.ACCESS_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/${GITHUB_REPOSITORY}/releases \
          -d '{"tag_name":"${{ needs.check_build_number.outputs.number }}","name":"${{ needs.check_build_number.outputs.number }}"}')
          
          echo "release_id=$(echo $release_json | jq -r .id)" >> $GITHUB_OUTPUT
        
      - name: Upload a release assets
        run: |
          find "artifacts" -type f | while read -r file; do
            curl -L -f \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.ACCESS_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -H "Content-Type: application/octet-stream" \
            "https://uploads.github.com/repos/${GITHUB_REPOSITORY}/releases/${{ steps.current_release.outputs.release_id }}/assets?name=$(basename "$file")" \
            --data-binary "@$file"
            echo "Uploaded: $(basename "$file")"
          done
